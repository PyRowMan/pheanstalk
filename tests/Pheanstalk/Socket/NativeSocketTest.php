<?php

namespace {
    // This allow us to configure the behavior of the "global mock"
    $mockWrite = false;
}

namespace Pheanstalk\Socket {
    // And this here, does the trick: it will override the socket_create()
    // function in your code *just for the namespace* where you are defining it.
    // This relies on the code above calling the socket_create function without
    // the leading backslash, so we trick SomeClass into calling our own function
    // inside that namespace instead of the global socket_create function.
    function fwrite()
    {
        global $mockWrite;
        if (isset($mockWrite) && $mockWrite === true) {
            return 0;
        } else {
            return call_user_func_array('\fwrite', func_get_args());
        }
    }
    use PHPUnit\Framework\TestCase;

    class NativeSocketTest extends TestCase
    {
        /** @var NativeSocket $object */
        protected $object;

        protected function setUp()
        {
            parent::setUp(); // TODO: Change the autogenerated stub
            $this->object = new NativeSocket('localhost', 5000, 2, true);
        }

        /**
         * @expectedException \Pheanstalk\Exception\SocketException
         */
        public function testShouldFailToWrite()
        {
            global $mockWrite;
            $mockWrite = true;
            $this->object->write('1');
        }
    }
}




